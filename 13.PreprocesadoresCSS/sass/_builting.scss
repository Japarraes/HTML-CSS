@use "sass:string";
@use "sass:math";
@use "sass:list";
@use "sass:selector";
@use "sass:color";

// FUNCIONES CON STRING
@debug "Hola";

// Devuelve posición de un substring dentro de un string
@debug string.index("Helvetica Neue", "Helvetica"); // 1
@debug string.index("Helvetica Neue", "Neue"); // 11

// Devuelve un string con la inserción indicada
$string: "Helvetica";
$newString: string.insert($string, " Bold", 10); 
@debug $newString; // "Helvetica Bold"

// Devuelve el tamaño del string
@debug string.length($newString); // 14

// Devuelve un substring de un string
@debug string.slice($newString, 5,9); // etica

// Convertir a mayúsculas o minúsculas
@debug string.to-upper-case($newString);
@debug string.to-lower-case($newString);

// Crear un único ID
@debug string.unique-id();

// FUNCIONES CON MATH
@debug math.$e;
@debug math.$pi;

// Obtener el valor entero de un número por arriba
@debug math.ceil(4.2); // 5
@debug math.ceil(4.9); // 5

// Obtener el valor entero de un número por abajo
@debug math.floor(4.2); // 4
@debug math.floor(4.9); // 4

// Devuelve el valor al entero más cercano
@debug math.round(4.2); // 4
@debug math.round(4.5); // 5
@debug math.round(4.9); // 5

// Devuelve un valor que seguro está en el rango. Si el número es menor al rago, devuelve el valor mínimo
// Si es mayor del rango, devuelve el valor máximo
@debug math.clamp(1px, -1px, 10px); // 1px
@debug math.clamp(1px, 3px, 10px); // 3px
@debug math.clamp(1px, 21px, 10px); // 10px

// Devuelve el máx/min de una lista
$widths: 50px, 30px, 100px;
@debug math.max($widths...); // 100px
@debug math.min($widths...); // 30px

// Devuelve el valor absoluto de un número
@debug math.abs(-1px); // 1px
@debug math.abs(1px); // 1px

// Funciones dentro de funciones
@debug math.pow(100, math.div(1, 3)); // 4.6415888336

// FUNCIONES CON LISTAS

// crear listas
@debug list.append(10px 20px, 30px); // 10px 20px 30px
@debug list.append((blue, red), green); // blue, red, green
@debug list.append(10px 20px, 30px 40px); // 10px 20px (30px 40px)

// Insertar elementos en una lista con el separador indicado
@debug list.append(10px, 20px, $separator: comma); // 10px, 20px

// Devuelve la posición del elemento buscado
$border-custom: solid 1px transparent;
@debug list.index($border-custom, 1px); // 2
@debug list.index($border-custom, 2px); // null

// Devuelve si la lista esta definida como array []
$array1: 1px 2px 3px;
//$array2: [1px 2px 3px];
$array2: 1px 2px 3px;
@debug list.is-bracketed($array1); // false
@debug list.is-bracketed($array2); // true

// Devuelve la unión de dos arrays y el nº de elementos de la lista
@debug list.join($array1, $array2, $separator: comma, $bracketed: on);
@debug list.length(list.join($array1, $array2));

// Devuelve el tipo de separador de la lista
@debug list.separator($border-custom);
@debug list.separator(list.join($array1, $array2, $separator: comma, $bracketed: on));

// Devuelve la lista resultante de sustituir el valor indicado en la posición indicada
@debug $border-custom;
@debug list.set-nth($border-custom, 2, 2px);

// FUNCIONES DE SELECTOR
$selector1: "a";
$selector2: ".disabled";
@debug selector.append($selector1, $selector2);

// FUNCIONES DE COLOR
// Devuelve un color modificado en la tonalidad según se especifique
$color: #11b5ec;
@debug color.adjust($color, $blue: -50);
$color2: #11b5ba;

// Devuelve el color complementario al indicado
@debug color.complement($color);
$color3: #ec4811;

//Devuelve un color oscurecido/claro en el % indicado
@debug darken($color2, 20%);
@debug lighten($color2, 20%);
$color-dark: #085a5d;
$color-light: #43e9ee;